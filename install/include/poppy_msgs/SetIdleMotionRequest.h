// Generated by gencpp from file poppy_msgs/SetIdleMotionRequest.msg
// DO NOT EDIT!


#ifndef POPPY_MSGS_MESSAGE_SETIDLEMOTIONREQUEST_H
#define POPPY_MSGS_MESSAGE_SETIDLEMOTIONREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace poppy_msgs
{
template <class ContainerAllocator>
struct SetIdleMotionRequest_
{
  typedef SetIdleMotionRequest_<ContainerAllocator> Type;

  SetIdleMotionRequest_()
    : command(0)  {
    }
  SetIdleMotionRequest_(const ContainerAllocator& _alloc)
    : command(0)  {
  (void)_alloc;
    }



   typedef uint8_t _command_type;
  _command_type command;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(COMMAND_START)
  #undef COMMAND_START
#endif
#if defined(_WIN32) && defined(COMMAND_STOP)
  #undef COMMAND_STOP
#endif
#if defined(_WIN32) && defined(COMMAND_PAUSE)
  #undef COMMAND_PAUSE
#endif
#if defined(_WIN32) && defined(COMMAND_RESUME)
  #undef COMMAND_RESUME
#endif

  enum {
    COMMAND_START = 1u,
    COMMAND_STOP = 0u,
    COMMAND_PAUSE = 2u,
    COMMAND_RESUME = 3u,
  };


  typedef boost::shared_ptr< ::poppy_msgs::SetIdleMotionRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::poppy_msgs::SetIdleMotionRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SetIdleMotionRequest_

typedef ::poppy_msgs::SetIdleMotionRequest_<std::allocator<void> > SetIdleMotionRequest;

typedef boost::shared_ptr< ::poppy_msgs::SetIdleMotionRequest > SetIdleMotionRequestPtr;
typedef boost::shared_ptr< ::poppy_msgs::SetIdleMotionRequest const> SetIdleMotionRequestConstPtr;

// constants requiring out of line definition

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::poppy_msgs::SetIdleMotionRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::poppy_msgs::SetIdleMotionRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::poppy_msgs::SetIdleMotionRequest_<ContainerAllocator1> & lhs, const ::poppy_msgs::SetIdleMotionRequest_<ContainerAllocator2> & rhs)
{
  return lhs.command == rhs.command;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::poppy_msgs::SetIdleMotionRequest_<ContainerAllocator1> & lhs, const ::poppy_msgs::SetIdleMotionRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace poppy_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::poppy_msgs::SetIdleMotionRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::poppy_msgs::SetIdleMotionRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::poppy_msgs::SetIdleMotionRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::poppy_msgs::SetIdleMotionRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::poppy_msgs::SetIdleMotionRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::poppy_msgs::SetIdleMotionRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::poppy_msgs::SetIdleMotionRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8be1c25e78be3492319574e465362b18";
  }

  static const char* value(const ::poppy_msgs::SetIdleMotionRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8be1c25e78be3492ULL;
  static const uint64_t static_value2 = 0x319574e465362b18ULL;
};

template<class ContainerAllocator>
struct DataType< ::poppy_msgs::SetIdleMotionRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "poppy_msgs/SetIdleMotionRequest";
  }

  static const char* value(const ::poppy_msgs::SetIdleMotionRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::poppy_msgs::SetIdleMotionRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 COMMAND_START = 1\n"
"uint8 COMMAND_STOP = 0\n"
"uint8 COMMAND_PAUSE = 2\n"
"uint8 COMMAND_RESUME = 3\n"
"\n"
"uint8 command\n"
;
  }

  static const char* value(const ::poppy_msgs::SetIdleMotionRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::poppy_msgs::SetIdleMotionRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.command);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SetIdleMotionRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::poppy_msgs::SetIdleMotionRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::poppy_msgs::SetIdleMotionRequest_<ContainerAllocator>& v)
  {
    s << indent << "command: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.command);
  }
};

} // namespace message_operations
} // namespace ros

#endif // POPPY_MSGS_MESSAGE_SETIDLEMOTIONREQUEST_H
